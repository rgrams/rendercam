
local rendercam = require "rendercam.rendercam"

local mouse_spos = vmath.vector3() -- screen pos
local mouse_wpos = vmath.vector3() -- world pos

local zstep = 10
local panning = false
local orbit_cam_speed = 0.3

local cursor = msg.url("main", "/cursor/dot", "script")
local xrot = vmath.quat_rotation_x(math.rad(-30))
local cam_ids
local planeNormal = vmath.vector3(0, 0, 1)
local planePoint = vmath.vector3(0, 0, 0)


function init(self)
	msg.post(".", "acquire_input_focus")
	self.orbitCamAngle = 0

	rendercam.follow(go.get_id("character"), true, go.get_id("camera1"))

	-- Tile map size calculation
	local tileSize = 64 
	local x, y, w, h = tilemap.get_bounds("/tilemap#test-tilemap")
	x = x - 1
	y = y - 1
	local pos = go.get_position("/tilemap#test-tilemap")
	self.rectBounds = vmath.vector4(pos.x + (x * tileSize), pos.y + (y * tileSize), pos.x + ((x + w) * tileSize), pos.y + ((y + h) * tileSize))
	
	-- Camera focus zone rectangle
	rendercam.focusZone(100, 100, 100, 100)

	-- Camera viewport limits with rectangle
	rendercam.cameraBounds(self.rectBounds.x, self.rectBounds.w, self.rectBounds.z, self.rectBounds.y)

	self.mouse_spos = vmath.vector3()
	cam_ids = { go.get_id("camera1"), go.get_id("camera2"), go.get_id("camera3"), go.get_id("camera4") }
	self.camIndex = 1
end

function update(self, dt)
	local rot = vmath.quat_rotation_y(self.orbitCamAngle) * xrot
	go.set_rotation(rot, "orbit pivot")
	go.set_rotation(rot, "orbit pivot 2")
	self.orbitCamAngle = self.orbitCamAngle + orbit_cam_speed * dt


	if self.camIndex == 1 then
		-- if using the 2D orthographic camera
		self.mouse_wpos = rendercam.screen_to_world_2d(self.mouse_spos.x, self.mouse_spos.y)
	else
		-- if using one of the other cameras
		--		screen_to_world_2d works for a 2D-oriented perspective camera, but
		--		will have some slight imprecision based on the size of the view depth.
		local point = rendercam.screen_to_world_plane(self.mouse_spos.x, self.mouse_spos.y, planeNormal, planePoint)
		-- point will be nil if the camera angle is parallel to the plane
		if point then self.mouse_wpos = point end
	end
	msg.post(cursor, "update pos", {pos = self.mouse_wpos})
end

function on_input(self, action_id, action)
	if action_id == nil then
		self.mouse_spos.x = action.screen_x;  self.mouse_spos.y = action.screen_y

		if panning then
			if self.camIndex == 1 or self.camIndex == 2 then
				-- if using one of the 2D-oriented cameras, use cursor world delta
				local dv = rendercam.screen_to_world_2d(action.screen_dx, action.screen_dy, true)
				rendercam.pan(-dv.x, -dv.y)
			else
				-- if using one of the 3D-oriented cameras, just use screen delta
				rendercam.pan(-action.screen_dx, -action.screen_dy)
			end
		end

	elseif action_id == hash("mouse wheel up") then
		rendercam.zoom(-zstep)

	elseif action_id == hash("mouse wheel down") then
		rendercam.zoom(zstep)

	elseif action_id == hash("middle click") then
		if action.pressed then
			panning = true
		elseif action.released then
			panning = false
		end

	elseif action_id == hash("space") and action.pressed then
		self.long = not self.long
		rendercam.shake(self.long and 10 or 30, self.long and 1 or 0.1)

	elseif action_id == hash("enter") and action.pressed then
		local angle = math.random() * math.pi * 2
		rendercam.recoil(vmath.vector3(-20, 0, 0), 0.3)

	elseif action_id == hash("1") and action.pressed then
		self.camIndex = 1
		rendercam.activate_camera(cam_ids[self.camIndex])

	elseif action_id == hash("2") and action.pressed then
		self.camIndex = 2
		rendercam.activate_camera(cam_ids[self.camIndex])

	elseif action_id == hash("3") and action.pressed then
		self.camIndex = 3
		rendercam.activate_camera(cam_ids[self.camIndex])

	elseif action_id == hash("4") and action.pressed then
		self.camIndex = 4
		rendercam.activate_camera(cam_ids[self.camIndex])

	elseif action_id == hash("escape") then
		msg.post("@system:", "exit", {code = 0})
	end
end

function final(self)
	msg.post(".", "release_input_focus")
end
